// This is used only to extract the active effects from items that were not generated by the importer

let types = [
	"adventuringgear",
	"archetypes",
	"armor",
	"backgrounds",
	"classes",
	"classfeatures",
	"enhanceditems",
	"feats",
	"fightingstyles",
	"fightingmasteries",
	"forcepowers",
	"gamingset",
	"lightsaberforms",
	"species",
	"speciestraits",
	"techpowers",
	"weapons"
]
types = [
	"feats"
]

let verbose = false;

function clean(str){
	str = str || '';
	str = str.toLowerCase();
	str = str.replaceAll(/[^\w\s-]/g, '');
	str = str.replaceAll(/[\s-]+/g, '_');
	str = str.replaceAll(/^[-_]+/g, '');
	str = str.replaceAll(/[-_]+$/g, '');
	return str;
}

function getUID(item){
	uid = clean(item.type)
	uid = uid.charAt(0).toUpperCase() + uid.substr(1)

	uid += `.name-${clean(item.name)}`

	category = item.data.type.value;
	if (category) uid += `.equipmentCategory-${clean(category)}`;
	// subcategory = item.data.type.subtype;
	// if (subcategory) uid += `.equipmentSubcategory-${clean(subcategory)}`;

	if (item.data.requirements) uid += `.sourceName-${clean(item.data.requirements)}`

	return uid
}

for (let type of types){
	let foundry_data = {};

	console.log(`Extracting AEs from ${type} compendium`)

	let pack = await game.packs.get(`sw5e.${type}`);
	if (!pack){
		console.log(`Compendium pack sw5e.${type} not found`);
		continue;
	}

	let was_locked = pack.locked;
	await pack.configure({locked: false})

	let pack_docs = await pack.getDocuments();
	for(let pack_doc of pack_docs){
		let pack_item = pack_doc.data;

		uid = getUID(pack_item);
		foundry_data[uid] = {
			id: uid,
			effects: pack_item.effects
		}
	}

	await pack.configure({locked: was_locked})

	console.log('Foundry Data:')
	console.log(foundry_data);
}

